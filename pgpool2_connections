#! /usr/bin/env perl
# Perl version implementation of https://github.com/vpetersson/munin_pgpool
use strict;
use warnings;

my $argv = shift || '';
my $VERSION = '0.0.3';

if( $argv eq 'autoconf' ) {
    print 'yes'."\n";

} elsif( $argv eq 'config' ) {
    my $data = [];
    push @$data, 
        'graph_title pgpool-II',
        'graph_args --base 1000 -l 0',
        'graph_vlabel number of connections',
        'graph_category PostgreSQL',
        'graph_info This graph monitors the number of connections to pgpool-II.',
        'wait.label Wait for connection',
        'wait.info The number of wait for connection request.',
        'idle.label Idle connections',
        'idle.info The number of idle in transaction.',
        'max.label num_init_children',
        'max.info Maximum number of connections (num_init_children).';
    print $_."\n" for @$data;

} else {

    my $pgpoolhost = $ENV{'host'} || '127.0.0.1';
    my $pgpoolport = $ENV{'port'} || 9898;
    my $pgpooluser = $ENV{'user'} || 'munin';
    my $pgpoolpass = $ENV{'userpwd'} || '';
    my $pcpstatcmd = $ENV{'pcppath'} || 'pcp_pool_status';
    my $timeoutsec = 5;
    my $execperlqx = 1;

    my $waitcounts = 0;
    my $idlecounts = 0;
    my $maxprocess = 'NaN';

    eval { 
        require IPC::Cmd;
        $pcpstatcmd = IPC::Cmd::can_run( $ENV{'pcppath'} || 'pcp_pool_status' );
        $execperlqx = 0;
    };

    if( $pcpstatcmd ) {
        # pcp_pool_status is executable
        # Usage: pcp_pool_status [-d] timeout hostname port# username password
        my $commandarg = {};
        my $runcommand = '';
        my $cmdresults = undef;
        my $stdouttext = q();

        $runcommand  = sprintf( "%s %d %s %d %s %s", $pcpstatcmd, $timeoutsec,
                            $pgpoolhost, $pgpoolport, $pgpooluser, $pgpoolpass );
        $runcommand .= q( | grep -A1 'num_init_children');

        if( $execperlqx ) {
            # no IPC::Cmd
            $stdouttext = qx( $runcommand );

        } else {
            # use IPC::Cmd
            $commandarg  = { 'timeout' => $timeoutsec };
            $cmdresults = IPC::Cmd::run_forked( $runcommand, $commandarg );
            $stdouttext = $cmdresults->{'stdout'} || q();
        }

        for my $e ( split( "\n", $stdouttext ) ) {
            $maxprocess = $1 if $e =~ m|\Avalue: (\d+)|;
        }

        # Count the number of processes of pgpool
        $runcommand  = q(ps ax);
        $runcommand .= q( | grep 'pgpool: ' | grep -v 'grep');

        if( $execperlqx ) {
            # no IPC::Cmd
            $stdouttext = qx( $runcommand );

        } else {
            # use IPC::Cmd
            $commandarg = { 'timeout' => $timeoutsec * 2 };
            $cmdresults = IPC::Cmd::run_forked( $runcommand, $commandarg );
            $stdouttext = $cmdresults->{'stdout'} || q();
        }

        for my $e ( split( "\n", $stdouttext ) ) {

            next unless $e =~ m|pgpool: |;
            if( $e =~ m|pgpool: wait for connection request| ) {
                $waitcounts++;

            } elsif( $e =~ m|pgpool: idle in transaction| ) {
                $idlecounts++;
            }
        }

        printf "wait.value %d\n", $waitcounts;
        printf "idle.value %d\n", $idlecounts;
        printf "max.value %s\n", $maxprocess;

    } else {
        # Cannot run pcp_pool_status
        printf STDERR "cannot execute pcp_pool_status command\n";
        exit(1);
    }
}
__END__
